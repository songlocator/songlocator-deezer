//@ sourceMappingURL=songlocator-deezer.map
// Generated by CoffeeScript 1.6.1
/*

  SongLocator resolver for Deezer.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(root, factory) {
  var SongLocator;
  if (typeof exports === 'object') {
    SongLocator = require('songlocator-base');
    return module.exports = factory(SongLocator);
  } else if (typeof define === 'function' && define.amd) {
    return define(function(require) {
      SongLocator = require('songlocator-base');
      return root.SongLocator.Deezer = factory(SongLocator);
    });
  } else {
    return root.SongLocator.Deezer = factory(SongLocator);
  }
})(this, function(_arg) {
  var BaseResolver, Resolver, extend;
  BaseResolver = _arg.BaseResolver, extend = _arg.extend;
  Resolver = (function(_super) {

    __extends(Resolver, _super);

    function Resolver() {
      return Resolver.__super__.constructor.apply(this, arguments);
    }

    Resolver.prototype.name = 'deezer';

    Resolver.prototype.score = 0.9;

    Resolver.prototype.search = function(qid, query) {
      var _this = this;
      return this.request({
        url: 'http://api.deezer.com/2.0/search',
        params: {
          q: query
        },
        callback: function(error, response) {
          var item, results;
          if (error != null) {
            return;
          }
          if (!(response.data.length > 0)) {
            return;
          }
          results = (function() {
            var _i, _len, _ref, _ref1, _ref2, _ref3, _results;
            _ref = response.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push({
                title: item.title,
                artist: (_ref1 = item.artist) != null ? _ref1.name : void 0,
                album: (_ref2 = item.album) != null ? _ref2.title : void 0,
                source: this.name,
                id: item.id,
                linkURL: item.link,
                imageURL: "" + ((_ref3 = item.album) != null ? _ref3.cover : void 0) + "?size=big",
                audioURL: void 0,
                audioPreviewURL: item.preview,
                mimetype: 'audio/mpeg',
                duration: item.duration
              });
            }
            return _results;
          }).call(_this);
          results = results.slice(0, _this.options.searchMaxResults);
          return _this.results(qid, results);
        }
      });
    };

    return Resolver;

  })(BaseResolver);
  return {
    Resolver: Resolver
  };
});
